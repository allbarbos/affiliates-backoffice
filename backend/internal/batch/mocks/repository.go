// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/batch/repository.go

// Package mock_batch is a generated GoMock package.
package mock_batch

import (
	batch "affiliates-backoffice-backend/internal/batch"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	gorm "gorm.io/gorm"
)

// MockRepositoryI is a mock of RepositoryI interface.
type MockRepositoryI struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryIMockRecorder
}

// MockRepositoryIMockRecorder is the mock recorder for MockRepositoryI.
type MockRepositoryIMockRecorder struct {
	mock *MockRepositoryI
}

// NewMockRepositoryI creates a new mock instance.
func NewMockRepositoryI(ctrl *gomock.Controller) *MockRepositoryI {
	mock := &MockRepositoryI{ctrl: ctrl}
	mock.recorder = &MockRepositoryIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepositoryI) EXPECT() *MockRepositoryIMockRecorder {
	return m.recorder
}

// BeginTran mocks base method.
func (m *MockRepositoryI) BeginTran() *gorm.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginTran")
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// BeginTran indicates an expected call of BeginTran.
func (mr *MockRepositoryIMockRecorder) BeginTran() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginTran", reflect.TypeOf((*MockRepositoryI)(nil).BeginTran))
}

// GetFileToProcess mocks base method.
func (m *MockRepositoryI) GetFileToProcess(ctx context.Context) (*batch.Model, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileToProcess", ctx)
	ret0, _ := ret[0].(*batch.Model)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFileToProcess indicates an expected call of GetFileToProcess.
func (mr *MockRepositoryIMockRecorder) GetFileToProcess(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileToProcess", reflect.TypeOf((*MockRepositoryI)(nil).GetFileToProcess), ctx)
}

// GetFiles mocks base method.
func (m *MockRepositoryI) GetFiles(ctx context.Context, affiliateID string) (*[]batch.Model, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFiles", ctx, affiliateID)
	ret0, _ := ret[0].(*[]batch.Model)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFiles indicates an expected call of GetFiles.
func (mr *MockRepositoryIMockRecorder) GetFiles(ctx, affiliateID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFiles", reflect.TypeOf((*MockRepositoryI)(nil).GetFiles), ctx, affiliateID)
}

// SaveErrors mocks base method.
func (m *MockRepositoryI) SaveErrors(ctx context.Context, id uuid.UUID, errs []batch.FileErrorModel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveErrors", ctx, id, errs)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveErrors indicates an expected call of SaveErrors.
func (mr *MockRepositoryIMockRecorder) SaveErrors(ctx, id, errs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveErrors", reflect.TypeOf((*MockRepositoryI)(nil).SaveErrors), ctx, id, errs)
}

// SaveFile mocks base method.
func (m *MockRepositoryI) SaveFile(ctx context.Context, model *batch.Model) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveFile", ctx, model)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveFile indicates an expected call of SaveFile.
func (mr *MockRepositoryIMockRecorder) SaveFile(ctx, model interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveFile", reflect.TypeOf((*MockRepositoryI)(nil).SaveFile), ctx, model)
}

// UpdateStatus mocks base method.
func (m *MockRepositoryI) UpdateStatus(ctx context.Context, id uuid.UUID, status string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatus", ctx, id, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockRepositoryIMockRecorder) UpdateStatus(ctx, id, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockRepositoryI)(nil).UpdateStatus), ctx, id, status)
}
