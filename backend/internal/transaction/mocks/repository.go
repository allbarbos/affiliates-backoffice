// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/transaction/repository.go

// Package mock_transaction is a generated GoMock package.
package mock_transaction

import (
	transaction "affiliates-backoffice-backend/internal/transaction"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockRepositoryI is a mock of RepositoryI interface.
type MockRepositoryI struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryIMockRecorder
}

// MockRepositoryIMockRecorder is the mock recorder for MockRepositoryI.
type MockRepositoryIMockRecorder struct {
	mock *MockRepositoryI
}

// NewMockRepositoryI creates a new mock instance.
func NewMockRepositoryI(ctrl *gomock.Controller) *MockRepositoryI {
	mock := &MockRepositoryI{ctrl: ctrl}
	mock.recorder = &MockRepositoryIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepositoryI) EXPECT() *MockRepositoryIMockRecorder {
	return m.recorder
}

// GetTransactions mocks base method.
func (m *MockRepositoryI) GetTransactions(affiliateID string) (*[]transaction.Model, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactions", affiliateID)
	ret0, _ := ret[0].(*[]transaction.Model)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactions indicates an expected call of GetTransactions.
func (mr *MockRepositoryIMockRecorder) GetTransactions(affiliateID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactions", reflect.TypeOf((*MockRepositoryI)(nil).GetTransactions), affiliateID)
}

// Save mocks base method.
func (m *MockRepositoryI) Save(tran *gorm.DB, transactions []*transaction.Model) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", tran, transactions)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockRepositoryIMockRecorder) Save(tran, transactions interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockRepositoryI)(nil).Save), tran, transactions)
}
